Product of Array Except Self

Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

You must write an algorithm that runs in O(n) time and without using the division operation.

 

Example 1:

Input: nums = [1,2,3,4]
Output: [24,12,8,6]
Example 2:

Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]
 

Constraints:

2 <= nums.length <= 105
-30 <= nums[i] <= 30
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
 

Follow up: Can you solve the problem in O(1) extra space complexity? (The output array does not count as extra space for space complexity analysis.)


Solution

class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        vector<int>answer(0);
        int m=1;
        int m1=1;
        int count=0;
        for(int i=0;i<nums.size();i++){
            answer.push_back(nums[i]);
           if(nums[i]!=0){
               m=m*nums[i];
               m1=m1*nums[i];
           } else {
               m=m*nums[i];
               count++;
           }
        }
        for(int i=0;i<nums.size();i++){
           if(count>1){
               answer[i]=0;
           } else if(nums[i]==0) {
                    answer[i]=m1;
           } else
                answer[i]= m/nums[i];
        }
        return answer;
    }
};
        